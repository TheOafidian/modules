nextflow_process {
    name "Test Process METABULI_CLASSIFY"
    script "../main.nf"
    process "METABULI_CLASSIFY"
    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "metabuli"
    tag "metabuli/classify"

    setup {
        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [],
                    file(params.modules_testdata_base_path  + "delete_me/metabuli/metabuli_db.tar.gz", checkIfExists: true)
                ])
                """
            }
        }
    }

    test("sarscov2 illumina single end [fastq]") {
        config "./nextflow-se.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [ file(
                        params.test_data['sarscov2']['illumina']['test_1_fastq_gz'],
                        checkIfExists: true
                    )]
                ]
                input[1] = UNTAR.out.untar
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match()},
            )
        }
    }

    test("sarscov2 illumina paired end [fastq]") {
        when {

            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(
                            params.test_data['sarscov2']['illumina']['test_1_fastq_gz'],
                            checkIfExists: true
                        ),
                        file(
                            params.test_data['sarscov2']['illumina']['test_2_fastq_gz'],
                            checkIfExists: true
                        )

                    ]
                ]
                input[1] = UNTAR.out.untar
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match()},
            )
        }
    }
}
