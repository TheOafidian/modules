nextflow_process {
    name "Test Process METABULI_CLASSIFY"
    script "../main.nf"
    process "METABULI_CLASSIFY"
    tag "modules"
    tag "modules_nfcore"
    tag "untar"
    tag "metabuli"
    tag "metabuli/classify"
    tag "metabuli/add"
    tag "metabuli/build"

    setup {
        run("METABULI_ADD") {
            script "modules/nf-core/metabuli/add/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test' ],
                        [
                        file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.fasta', checkIfExists: true),
                        file(params.modules_testdata_base_path +'genomics/sarscov2/genome/proteome.fasta', checkIfExists: true),
                        ]
                    ]
                input[1] = file(params.modules_testdata_base_path +'genomics/sarscov2/metagenome/prot_names.dmp', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path +'genomics/sarscov2/metagenome/prot_nodes.dmp', checkIfExists: true)
                input[3] = [] // needs a merged.dmp
                input[4] = file(params.modules_testdata_base_path + 'delete_me/metabuli/acc2taxid', checkIfExists: true)
                """
            }
        }
        run("METABULI_BUILD") {
            script "modules/nf-core/metabuli/build/main.nf"
            process {
                """
                input[0] = METABULI_ADD.out.db
                input[1] = []
                """
            }
        }
    }

    test("sarscov2 illumina single end [fastq]") {
        config "./nextflow-se.config"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [ file(
                        params.test_data['sarscov2']['illumina']['test_1_fastq_gz'],
                        checkIfExists: true
                    )]
                ]
                input[1] = METABULI_BUILD.out.db
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match()},
            )
        }
    }

    test("sarscov2 illumina paired end [fastq]") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(
                            params.test_data['sarscov2']['illumina']['test_1_fastq_gz'],
                            checkIfExists: true
                        ),
                        file(
                            params.test_data['sarscov2']['illumina']['test_2_fastq_gz'],
                            checkIfExists: true
                        )

                    ]
                ]
                input[1] = METABULI_BUILD.out.db
                """
            }
        }

        then {
            assertAll(
            { assert process.success },
            { assert snapshot(process.out).match()},
            )
        }
    }
}
